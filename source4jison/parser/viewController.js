/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var viewController = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,17],$V4=[1,15],$V5=[1,16],$V6=[1,18],$V7=[6,9],$V8=[1,31],$V9=[1,37],$Va=[1,39],$Vb=[1,44],$Vc=[1,56],$Vd=[1,57],$Ve=[1,59],$Vf=[1,58],$Vg=[9,23],$Vh=[1,69],$Vi=[6,9,23],$Vj=[1,99],$Vk=[1,94],$Vl=[1,98],$Vm=[1,95],$Vn=[1,96],$Vo=[1,97];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ConfigEntry":3,"{":4,"ConfigList":5,"}":6,"EOF":7,"Config":8,",":9,"ClassName":10,"Import":11,"ViewModels":12,"Events":13,"Bind":14,"Content":15,"VCConfig":16,"NAME":17,":":18,"JSONString":19,"IMPORT":20,"[":21,"ImportList":22,"]":23,"VIEWMODELS":24,"ViewModelList":25,"ViewModel":26,"TYPE":27,"INIT":28,"JSONObject":29,"CONTENT":30,"Widget":31,"WidgetProperties":32,"WidgetProperty":33,"JSONMember":34,"Styles":35,"Units":36,"BindingProperty":37,"BINDINGPROP":38,"UNITS":39,"WidgetList":40,"STYLE":41,"StyleList":42,"Style":43,"JSONNumber":44,"EVENT":45,"EventList":46,"Event":47,"FUNCTION":48,"BIND":49,"VCCONFIG":50,"STRING":51,"NUMBER":52,"JSONNullLiteral":53,"NULL":54,"JSONBooleanLiteral":55,"TRUE":56,"FALSE":57,"JSONText":58,"JSONValue":59,"JSONArray":60,"JSONMemberList":61,"JSONElementList":62,"$accept":0,"$end":1},
terminals_: {2:"error",4:"{",6:"}",7:"EOF",9:",",17:"NAME",18:":",20:"IMPORT",21:"[",23:"]",24:"VIEWMODELS",27:"TYPE",28:"INIT",30:"CONTENT",38:"BINDINGPROP",39:"UNITS",41:"STYLE",45:"EVENT",48:"FUNCTION",49:"BIND",50:"VCCONFIG",51:"STRING",52:"NUMBER",54:"NULL",56:"TRUE",57:"FALSE"},
productions_: [0,[3,4],[5,1],[5,3],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[10,3],[11,5],[22,1],[22,3],[12,5],[25,1],[25,3],[26,9],[26,13],[15,3],[31,3],[32,1],[32,3],[33,1],[33,1],[33,1],[33,1],[37,3],[36,5],[40,1],[40,3],[35,5],[35,4],[42,1],[42,3],[43,3],[43,3],[43,3],[13,5],[46,1],[46,3],[47,3],[14,5],[16,3],[19,1],[44,1],[53,1],[55,1],[55,1],[58,2],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[29,2],[29,3],[34,3],[34,3],[34,3],[61,1],[61,3],[60,2],[60,3],[62,1],[62,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            return parserUtil.createClass(yy.model);
            
            /*if(yy.vc.layoutOnly == true) {yy.vc = {}; return null;}
            var R = require('ramda');
            R.map(function(vmInfo){
                yy.vc.onCreate += vmInfo.init;
                yy.vc.onDestroy += 'native(\'' + vmInfo.destroy + '\')';
            }, yy.vc.viewModelsInfo);

            parserUtil.createEssentialMethod(yy);
            return parserUtil.createClass(yy.model);*/
        
break;
case 11:
 yy.model.name = $$[$0]; 
break;
case 12:
 
            //yy.model.import = yy.model.import.concat($$[$0-1]);
        
break;
case 13: case 16: case 67:
this.$ = [$$[$0]];
break;
case 14:
this.$=$$[$0-2];this.$.push($$[$0])
break;
case 15:

            yy.model.viewModels = parserUtil.parseViewModels($$[$0-1]);
            //this.$ = parserUtil.createWidget($$[$0-3]);
            //yy.vc.viewModelsInfo = parserUtil.createViewModelsInfo(yy.model, $$[$0-1])
        
break;
case 17:
this.$=$$[$0-2];this.$.push($$[$0]);
break;
case 18:
 this.$ = {type: $$[$0-5], name: $$[$0-1], init: null}; 
break;
case 19:
 this.$ = {type: $$[$0-9], name: $$[$0-5], init: $$[$0-1]}; 
break;
case 20:
 yy.model.content = $$[$0] 
break;
case 21:

            this.$ = parserUtil.createWidget($$[$0-1]);
        
break;
case 22: case 34: case 40: case 63:
this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];
break;
case 23: case 35: case 41: case 64:
this.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1];
break;
case 28: case 37: case 38: case 42: case 60: case 61: case 62:
this.$ = [$$[$0-2], $$[$0]];
break;
case 29:
this.$ = [$$[$0-4], $$[$0-1]];
break;
case 30:
 this.$=$$[$0] 
break;
case 31:

            this.$ = parserUtil.combineCodeRecorder($$[$0-2], $$[$0]); 
            //this.$ = $$[$0-2]; this.$.push($$[$0]) 
        
break;
case 32: case 39:
this.$ = [$$[$0-4], $$[$0-1]]
break;
case 33:
this.$ = [$$[$0-3], {}]
break;
case 36:

            this.$ = [$$[$0-2], $$[$0]];
        
break;
case 44:

            if($$[$0]['layoutOnly'] == true) {
                yy.vc.layoutOnly = true;
            }
        
break;
case 45:
 // replace escaped characters with actual character
          this.$ = yytext.replace(/\\(\\|")/g, "$"+"1")
                     .replace(/\\n/g,'\n')
                     .replace(/\\r/g,'\r')
                     .replace(/\\t/g,'\t')
                     .replace(/\\v/g,'\v')
                     .replace(/\\f/g,'\f')
                     .replace(/\\b/g,'\b');
        
break;
case 46:
this.$ = Number(yytext);
break;
case 47:
this.$ = null;
break;
case 48:
this.$ = true;
break;
case 49:
this.$ = false;
break;
case 50:
return this.$ = $$[$0-1];
break;
case 58:
this.$ = {};
break;
case 59: case 66:
this.$ = $$[$0-1];
break;
case 65:
this.$ = [];
break;
case 68:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,8:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V0,20:$V1,24:$V2,30:$V3,45:$V4,49:$V5,50:$V6},{6:[1,19],9:[1,20]},o($V7,[2,2]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),{18:[1,21]},{18:[1,22]},{18:[1,23]},{18:[1,24]},{18:[1,25]},{18:[1,26]},{18:[1,27]},{7:[1,28]},{8:29,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V0,20:$V1,24:$V2,30:$V3,45:$V4,49:$V5,50:$V6},{19:30,51:$V8},{21:[1,32]},{21:[1,33]},{4:[1,34]},{4:[1,35]},{4:$V9,31:36},{4:$Va,29:38},{1:[2,1]},o($V7,[2,3]),o($V7,[2,11]),o([6,9,18,23],[2,45]),{19:41,22:40,51:$V8},{4:$Vb,25:42,26:43},{19:47,46:45,47:46,51:$V8},{19:47,46:48,47:46,51:$V8},o($V7,[2,20]),{13:54,19:55,27:$Vc,30:$Vd,32:49,33:50,34:51,35:52,36:53,39:$Ve,41:$Vf,45:$V4,51:$V8},o($V7,[2,44]),{6:[1,60],19:55,27:$Vc,30:$Vd,34:62,51:$V8,61:61},{9:[1,64],23:[1,63]},o($Vg,[2,13]),{9:[1,66],23:[1,65]},o($Vg,[2,16]),{27:[1,67]},{6:[1,68],9:$Vh},o($V7,[2,40]),{18:[1,70]},{6:[1,71],9:$Vh},{6:[1,72],9:[1,73]},o($V7,[2,22]),o($V7,[2,24]),o($V7,[2,25]),o($V7,[2,26]),o($V7,[2,27]),{18:[1,74]},{18:[1,75]},{18:[1,76]},{18:[1,77]},{18:[1,78]},o($Vi,[2,58]),{6:[1,79],9:[1,80]},o($V7,[2,63]),o($V7,[2,12]),{19:81,51:$V8},o($V7,[2,15]),{4:$Vb,26:82},{18:[1,83]},o($V7,[2,39]),{19:47,47:84,51:$V8},{48:[1,85]},o($V7,[2,43]),o($Vi,[2,21]),{13:54,19:55,27:$Vc,30:$Vd,33:86,34:51,35:52,36:53,39:$Ve,41:$Vf,45:$V4,51:$V8},{4:$Va,19:90,21:$Vj,29:92,38:$Vk,44:91,51:$V8,52:$Vl,53:88,54:$Vm,55:89,56:$Vn,57:$Vo,59:87,60:93},{4:$Va,19:90,21:$Vj,29:92,38:$Vk,44:91,51:$V8,52:$Vl,53:88,54:$Vm,55:89,56:$Vn,57:$Vo,59:100,60:93},{4:$Va,19:90,21:$Vj,29:92,38:$Vk,44:91,51:$V8,52:$Vl,53:88,54:$Vm,55:89,56:$Vn,57:$Vo,59:101,60:93},{4:[1,102]},{21:[1,103]},o($Vi,[2,59]),{19:55,27:$Vc,30:$Vd,34:104,51:$V8},o($Vg,[2,14]),o($Vg,[2,17]),{19:105,51:$V8},o($V7,[2,41]),o($V7,[2,42]),o($V7,[2,23]),o($V7,[2,60]),o($Vi,[2,51]),o($Vi,[2,52]),o($Vi,[2,53]),o($Vi,[2,54]),o($Vi,[2,55]),o($Vi,[2,56]),o($Vi,[2,57]),o($Vi,[2,47]),o($Vi,[2,48]),o($Vi,[2,49]),o($Vi,[2,46]),{4:$Va,19:90,21:$Vj,23:[1,106],29:92,38:$Vk,44:91,51:$V8,52:$Vl,53:88,54:$Vm,55:89,56:$Vn,57:$Vo,59:108,60:93,62:107},o($V7,[2,61]),o($V7,[2,62]),{6:[1,110],19:112,42:109,43:111,51:$V8},{4:$V9,31:114,40:113},o($V7,[2,64]),{9:[1,115]},o($Vi,[2,65]),{9:[1,117],23:[1,116]},o($Vg,[2,67]),{6:[1,118],9:[1,119]},o($V7,[2,33]),o($V7,[2,34]),{18:[1,120]},{9:[1,122],23:[1,121]},o($Vg,[2,30]),{17:[1,123]},o($Vi,[2,66]),{4:$Va,19:90,21:$Vj,29:92,38:$Vk,44:91,51:$V8,52:$Vl,53:88,54:$Vm,55:89,56:$Vn,57:$Vo,59:124,60:93},o($V7,[2,32]),{19:112,43:125,51:$V8},{19:126,38:[1,128],44:127,51:$V8,52:$Vl},o($V7,[2,29]),{4:$V9,31:129},{18:[1,130]},o($Vg,[2,68]),o($V7,[2,35]),o($V7,[2,36]),o($V7,[2,37]),o($V7,[2,38]),o($Vg,[2,31]),{19:131,51:$V8},{6:[1,132],9:[1,133]},o($Vg,[2,18]),{28:[1,134]},{18:[1,135]},{4:$Va,29:136},{6:[1,137]},o($Vg,[2,19])],
defaultActions: {28:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var parserUtil = require('../parserUtilRN/vcUtil');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 48
break;
case 2:return 20
break;
case 3:return 24
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 30
break;
case 5:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 39
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 41
break;
case 7:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 45
break;
case 8:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 49
break;
case 9:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 27
break;
case 10:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 17
break;
case 11:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 28
break;
case 12:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50
break;
case 13:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 38
break;
case 14:return 52
break;
case 15:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 51
break;
case 16:return 4
break;
case 17:return 6
break;
case 18:return 21
break;
case 19:return 23
break;
case 20:return 9
break;
case 21:return 18
break;
case 22:return 56
break;
case 23:return 57
break;
case 24:return 54
break;
case 25:return 7
break;
case 26:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:"function\s*\(\w*\)\s*\{\s*(.*\s*)*?\}")/,/^(?:"import")/,/^(?:"viewModels")/,/^(?:"content")/,/^(?:"units")/,/^(?:"style")/,/^(?:"event")/,/^(?:"bind")/,/^(?:"type")/,/^(?:"name")/,/^(?:"init")/,/^(?:"config")/,/^(?:"@\{.*\}")/,/^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:"(?:\\[\\"bfnrt\/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = viewController;
exports.Parser = viewController.Parser;
exports.parse = function () { return viewController.parse.apply(viewController, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}